{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport 'whatwg-fetch';\nexport function Get(_x) {\n  return _Get.apply(this, arguments);\n}\n\nfunction _Get() {\n  _Get = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(page) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('http://localhost:3000/api/earthquakes/?page=', page).then(checkStatus).then(parseJSON).then(function (data) {\n              return data;\n            }).catch(function (error) {\n              console.log('request failed', error);\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _Get.apply(this, arguments);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    var error = new Error(response.statusText);\n    error.response = response;\n    throw error;\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}","map":{"version":3,"sources":["/Users/md.shahab/env/earthquake-dashboard/app/javascript/src/services/index.js"],"names":["Get","page","fetch","then","checkStatus","parseJSON","data","catch","error","console","log","response","status","Error","statusText","json"],"mappings":";;;;;;AAAA,OAAO,cAAP;AAEA,gBAAsBA,GAAtB;AAAA;AAAA;;;;;2BAAO,iBAAmBC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACOC,KAAK,CAAC,8CAAD,EAAgDD,IAAhD,CAAL,CACXE,IADW,CACNC,WADM,EAEXD,IAFW,CAENE,SAFM,EAGXF,IAHW,CAGN,UAASG,IAAT,EAAe;AACnB,qBAAOA,IAAP;AACD,aALW,EAKTC,KALS,CAKH,UAASC,KAAT,EAAgB;AACvBC,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,KAA9B;AACD,aAPW,CADP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWP,SAASJ,WAAT,CAAqBO,QAArB,EAA+B;AAC7B,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACnD,WAAOD,QAAP;AACD,GAFD,MAEO;AACL,QAAIH,KAAK,GAAG,IAAIK,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAZ;AACAN,IAAAA,KAAK,CAACG,QAAN,GAAiBA,QAAjB;AACA,UAAMH,KAAN;AACD;AACF;;AAED,SAASH,SAAT,CAAmBM,QAAnB,EAA6B;AAC3B,SAAOA,QAAQ,CAACI,IAAT,EAAP;AACD","sourcesContent":["import 'whatwg-fetch'\n\nexport async function Get(page) {\n return await fetch('http://localhost:3000/api/earthquakes/?page=',page)\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(function(data) {\n    return data;\n  }).catch(function(error) {\n    console.log('request failed', error)\n  })\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json()\n}\n"]},"metadata":{},"sourceType":"module"}